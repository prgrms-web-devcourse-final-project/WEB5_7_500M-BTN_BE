plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
    }
}

group = 'io.pentacore'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def querydslVersion = "5.0.0"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation "org.springframework.retry:spring-retry"
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation("me.paulschwarz:spring-dotenv:3.0.0")

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'com.h2database:h2'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    //DTO 검증 NotBlank 등에 쓰인다
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation platform("software.amazon.awssdk:bom:2.25.4") // 버전 통일
    implementation "software.amazon.awssdk:s3"                    // S3 클라이언트


    implementation("net.logstash.logback:logstash-logback-encoder:7.4")

    // Querydsl
    implementation "com.querydsl:querydsl-core:${querydslVersion}"
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"


    implementation "com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.12.0"
    implementation "org.springframework.boot:spring-boot-starter-aop"



    implementation('net.dv8tion:JDA:5.0.0-beta.20') {
        exclude module: 'opus-java'
        exclude module: 'tink'}
}

// Querydsl 빌드 옵션 설정
def generated = file("build/generated/querydsl")

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += generated
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

tasks.named('test') {
    useJUnitPlatform()
}
